<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="z3)gLmDCKR(vv723MBFb" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="CbJh36-FnQzL~z=c[enA"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace reshade {" line1="    let enabled = false" line2="    let noiseEnabled = false" line3="    let shadingEnabled = false" line4="    let shadingMap: Image = null" line5="" line6="    let defaultShadingMap = img`" line7="        0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0" line8="        1 1 1 1 2 1 1 1 1 1 1 1 0 0 0 0" line9="        2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1" line10="        2 3 3 3 6 6 6 6 6 4 4 4 4 2 2 2" line11="        3 3 6 10 10 10 10 10 7 7 7 5 5 4 4 4" line12="        3 6 7 10 12 13 13 13 11 11 11 7 5 5 5 5" line13="        6 6 7 10 12 13 13 15 14 14 11 10 7 8 5 5" line14="        6 7 10 12 12 12 13 14 15 14 13 11 9 7 5 5" line15="        5 6 7 10 13 14 15 15 15 15 14 11 11 7 7 5" line16="        5 7 11 12 13 14 15 15 15 15 15 14 11 11 7 7" line17="        5 9 11 14 14 14 14 14 14 15 15 15 14 11 9 7" line18="        8 8 9 11 11 13 13 13 12 12 13 14 13 11 9 7" line19="        8 8 8 9 11 11 13 12 12 12 12 12 11 9 9 7" line20="        8 8 8 9 9 11 12 12 12 12 12 12 11 9 9 9" line21="        8 8 8 8 9 11 11 11 11 11 11 11 9 9 9 9" line22="        8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9" line23="    `" line24="    shadingMap = defaultShadingMap" line25="    shadingEnabled = true" line26="" line27="    // Enable reshade effects" line28="    export function enable() {" line29="        if (enabled) return" line30="        enabled = true" line31="" line32="        game.onUpdate(() =&gt; {" line33="            if (!enabled) return" line34="" line35="            let img = screen.clone()" line36="" line37="            applyVignette(img)" line38="            applyColorShift(img)" line39="" line40="            if (shadingEnabled &amp;&amp; shadingMap)" line41="                applyShadingMap(img)" line42="" line43="            if (noiseEnabled)" line44="                applyNoise(img)" line45="" line46="            screen.drawImage(img, 0, 0)" line47="        })" line48="    }" line49="" line50="    export function disable() {" line51="        enabled = false" line52="    }" line53="" line54="    export function setNoise(on: boolean) {" line55="        noiseEnabled = on" line56="    }" line57="" line58="    export function setShadingMap(map: Image) {" line59="        shadingMap = map" line60="        shadingEnabled = true" line61="    }" line62="" line63="    export function clearShadingMap() {" line64="        shadingEnabled = false" line65="    }" line66="" line67="    function applyColorShift(img: Image) {" line68="        for (let y = 0; y &lt; img.height; y++) {" line69="            for (let x = 0; x &lt; img.width; x++) {" line70="                let c = img.getPixel(x, y)" line71="                if (c == 7) img.setPixel(x, y, 2)" line72="                else if (c == 2) img.setPixel(x, y, 5)" line73="            }" line74="        }" line75="    }" line76="" line77="    function applyVignette(img: Image) {" line78="        const cx = img.width &gt;&gt; 1" line79="        const cy = img.height &gt;&gt; 1" line80="        const maxDist = Math.sqrt(cx * cx + cy * cy)" line81="" line82="        for (let y2 = 0; y2 &lt; img.height; y2++) {" line83="            for (let x2 = 0; x2 &lt; img.width; x2++) {" line84="                let dx = x2 - cx" line85="                let dy = y2 - cy" line86="                let dist = Math.sqrt(dx * dx + dy * dy) / maxDist" line87="                if (dist &gt; 0.6) {" line88="                    let col = img.getPixel(x2, y2)" line89="                    if (col != 0) img.setPixel(x2, y2, fadeColor(col))" line90="                }" line91="            }" line92="        }" line93="    }" line94="" line95="    function fadeColor(c: number): number {" line96="        if (c == 2) return 1" line97="        if (c == 5) return 3" line98="        if (c == 7) return 6" line99="        return c" line100="    }" line101="" line102="    function applyNoise(img: Image) {" line103="        for (let y3 = 0; y3 &lt; img.height; y3++) {" line104="            for (let x3 = 0; x3 &lt; img.width; x3++) {" line105="                if (Math.randomRange(0, 100) &lt; 3) {" line106="                    img.setPixel(x3, y3, Math.randomRange(1, 15))" line107="                }" line108="            }" line109="        }" line110="    }" line111="" line112="    function applyShadingMap(img: Image) {" line113="        for (let y4 = 0; y4 &lt; img.height; y4++) {" line114="            for (let x4 = 0; x4 &lt; img.width; x4++) {" line115="                let shade = shadingMap.getPixel(x4 % shadingMap.width, y4 % shadingMap.height)" line116="                if (shade &gt; 0) {" line117="                    let col2 = img.getPixel(x4, y4)" line118="                    img.setPixel(x4, y4, darkenColor(col2, shade))" line119="                }" line120="            }" line121="        }" line122="    }" line123="" line124="    function darkenColor(c: number, intensity: number): number {" line125="        // Just a simple fade approximation based on intensity" line126="        if (intensity &gt;= 6) return 0 // very dark" line127="        if (intensity &gt;= 4) return (c == 7 ? 6 : c == 2 ? 1 : c)" line128="        if (intensity &gt;= 2) return (c == 7 ? 1 : c)" line129="        return c" line130="    }" line131="}" numlines="132"></mutation></block></statement></block></xml>